//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace QuickMesh
{
		public class Selection
		{
		private List<Face> Faces = new List<Face>();
		public List<Face> Selected = new List<Face>();
				public Selection ()
				{
				}

		public Selection Make(){
			Selection s = new Selection ();
			s.Faces = this.Faces;
		}

		public Selection Circle(int vertexCount){
			Selection s = Make ();
			float arcLength = Mathf.PI * 2 / vertexCount;
			Face face = new Face();
			for (int i = 0; i < vertexCount; i++){
				Vertex vertex = new Vertex();
				vertex.Position = Vector3(Mathf.Cos(-i*arcLength), Mathf.Sin(-i*arcLength), 0);
				face.Vertices.Add(vertex);
			}
			Faces.Add(face);
			s.Selected.Add (face);
			return s;
		}

		public Mesh Finish(){
			Mesh m = new Mesh ();
			List<int> triangles = new List<int> ();
			List<Vector3> vertices = new List<Vector3> ();

			foreach (Face face in Faces) {
				int first = vertices.Count;
				for (int i=0; i<face.Vertices.Count;i++){
					vertices.Add(face.Vertices[i].Position);
				}
				for (int i=0; i<face.Vertices.Count-2; i++) {
					
					triangles.Add(first);
					triangles.Add(first+i+1);
					triangles.Add(first+i+2);
				}
			}
			m.vertices = vertices.ToArray();
			m.triangles = triangles.ToArray ();	
			m.RecalculateNormals();
			return m;
		}
	}
}

